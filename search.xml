<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>this指向分析</title>
    <url>/2021/02/13/this%E6%8C%87%E5%90%91%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<p>先看两个🌰</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>1.直接调用</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">foo</span>(); <span class="comment">// node-&gt;global 浏览器-&gt;window</span></span><br></pre></td></tr></table></figure></div>

<p>2.对象调用</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;obj&#x27;</span>,</span><br><span class="line">    <span class="attr">foo</span>: foo</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj.<span class="title function_">foo</span>(); <span class="comment">// &#123; name: &#x27;obj&#x27;, foo: [Function: foo] &#125;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="1-分析"><a href="#1-分析" class="headerlink" title="1.分析"></a>1.分析</h2><p>1.函数调用的时候 js会<strong>默认给this绑定一个值</strong></p>
<p>2.this的<strong>绑定和定义的位置（编写的位置）</strong>没有关系</p>
<p>3.this的<strong>绑定和调用方式以及调用的位置有关系</strong></p>
<p>4.this是<strong>运行时被绑定</strong>的</p>
<h2 id="2-规则"><a href="#2-规则" class="headerlink" title="2.规则"></a>2.规则</h2><h3 id="1-默认绑定"><a href="#1-默认绑定" class="headerlink" title="1.默认绑定"></a>1.默认绑定</h3><h4 id="1-独立函数调用（没有绑定到任何对象上）"><a href="#1-独立函数调用（没有绑定到任何对象上）" class="headerlink" title="1.独立函数调用（没有绑定到任何对象上）"></a>1.独立函数调用（没有绑定到任何对象上）</h4><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">foo</span>(); <span class="comment">// node-&gt;global 浏览器-&gt;window</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;obj&#x27;</span>,</span><br><span class="line">  <span class="attr">foo</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;foo&#x27;</span>, <span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> bar = obj.<span class="property">foo</span>;</span><br><span class="line"><span class="title function_">bar</span>(); <span class="comment">// node-&gt;global 浏览器-&gt;window</span></span><br></pre></td></tr></table></figure></div>

<p><strong>注意：严格模式下独立函数调用this的值为undefined</strong></p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span></span><br><span class="line"><span class="title function_">foo</span>(); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure></div>

<h4 id="2-内置函数的调用绑定（举例）"><a href="#2-内置函数的调用绑定（举例）" class="headerlink" title="2.内置函数的调用绑定（举例）"></a>2.内置函数的调用绑定（举例）</h4><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定时器</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// node--&gt;Timeout 浏览器 --&gt; window</span></span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// forEach(item, thisArg)</span></span><br><span class="line"><span class="keyword">const</span> num = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">num.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// node--&gt;global 浏览器 --&gt; window</span></span><br><span class="line">&#125;)</span><br><span class="line">num.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// &#123;name: &#x27;obj&#x27;&#125;</span></span><br><span class="line">&#125;, &#123;<span class="attr">name</span>: <span class="string">&#x27;obj&#x27;</span>&#125;);</span><br></pre></td></tr></table></figure></div>

<h3 id="2-隐式绑定"><a href="#2-隐式绑定" class="headerlink" title="2.隐式绑定"></a>2.隐式绑定</h3><p>通过某个函数进行调用</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>, <span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;obj&#x27;</span>,</span><br><span class="line">    <span class="attr">bar</span>: foo,</span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="title function_">bar</span>(); <span class="comment">// obj</span></span><br></pre></td></tr></table></figure></div>

<h3 id="3-显示绑定"><a href="#3-显示绑定" class="headerlink" title="3.显示绑定"></a>3.<strong>显示绑定</strong></h3><p>前置知识储备</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* call(thisArg, args1,args2...)</span></span><br><span class="line"><span class="comment">* thisArg 绑定this args1,args2...额外的实参(参数列表)</span></span><br><span class="line"><span class="comment">* 作用：this绑定到指定对象上</span></span><br><span class="line"><span class="comment">* */</span><span class="comment">// call apply语法</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;obj&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">person</span>(<span class="params">name, age, friend</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`this: <span class="subst">$&#123;<span class="variable language_">this</span>&#125;</span>`</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`name: <span class="subst">$&#123;name&#125;</span>, age: <span class="subst">$&#123;age&#125;</span>, friend: <span class="subst">$&#123;friend&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* call(thisArg, args1,args2...)</span></span><br><span class="line"><span class="comment">* thisArg 绑定this args1,args2...额外的实参(参数列表)</span></span><br><span class="line"><span class="comment">* 作用：this绑定到指定对象上</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line">foo.<span class="title function_">call</span>(obj); <span class="comment">// &#123; name: &#x27;obj&#x27; &#125;</span></span><br><span class="line">person.<span class="title function_">call</span>(obj, <span class="string">&#x27;cc&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;gg&#x27;</span>); <span class="comment">// &#123; name: &#x27;obj&#x27; &#125; name: cc, age: 18, friend: gg</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* apply(thisArg, argArray[])</span></span><br><span class="line"><span class="comment">* thisArg 绑定this argArray额外的实参(数组的形式)</span></span><br><span class="line"><span class="comment">* 作用：this绑定到指定对象上</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line">foo.<span class="title function_">apply</span>(obj); <span class="comment">// &#123; name: &#x27;obj&#x27; &#125;</span></span><br><span class="line">person.<span class="title function_">apply</span>(obj, [<span class="string">&#x27;cc&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;gg&#x27;</span>]); <span class="comment">// &#123; name: &#x27;obj&#x27; &#125; name: cc, age: 18, friend: gg</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bind语法</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* bind(thisArg, args1,args2...)</span></span><br><span class="line"><span class="comment">* thisArg 绑定this args1,args2...额外的实参(参数列表)</span></span><br><span class="line"><span class="comment">* 作用：一个函数总是显式的绑定到一个对象上 创建一个新的绑定函数</span></span><br><span class="line"><span class="comment">* 绑定函数对象又称为怪异函数对象(ES5)</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> bar = foo.<span class="title function_">bind</span>(obj);</span><br><span class="line"><span class="title function_">bar</span>(); <span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> baz = person.<span class="title function_">bind</span>(obj, <span class="string">&#x27;cc&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;gg&#x27;</span>);</span><br><span class="line"><span class="title function_">baz</span>(); <span class="comment">// &#123; name: &#x27;obj&#x27; &#125; name: cc, age: 18, friend: gg</span></span><br></pre></td></tr></table></figure></div>

<h4 id="1-call"><a href="#1-call" class="headerlink" title="1.call"></a>1.call</h4><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;obj&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>, <span class="string">&#x27;this&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo.<span class="title function_">call</span>(obj, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure></div>

<h4 id="2-apply"><a href="#2-apply" class="headerlink" title="2.apply"></a>2.apply</h4><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">foo.<span class="title function_">apply</span>(obj, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]);</span><br></pre></td></tr></table></figure></div>

<h4 id="3-bind"><a href="#3-bind" class="headerlink" title="3.bind"></a>3.bind</h4><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> bar = foo.<span class="title function_">bind</span>(obj);</span><br><span class="line"><span class="title function_">bar</span>();</span><br></pre></td></tr></table></figure></div>

<h4 id="4-new绑定"><a href="#4-new绑定" class="headerlink" title="4.new绑定"></a>4.new绑定</h4><p>将函数作为一个构造函数 通过new关键字来使用</p>
 <div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>, <span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title function_">foo</span>();</span><br></pre></td></tr></table></figure></div>

<p>new关键字执行步骤（先不考虑原型与原型链）</p>
<p>1.创建新的对象</p>
<p>2.将this指向这个空对象</p>
<p>3.执行函数体内的代码</p>
<p>4.没有显式返回非空对象时 默认返回这个对象</p>
<h2 id="3-优先级（由低到高）"><a href="#3-优先级（由低到高）" class="headerlink" title="3.优先级（由低到高）"></a>3.优先级（由低到高）</h2><p>1.默认绑定（最低）</p>
<p>2.隐式绑定</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 显示(高) -- 隐式(低)</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> bar = foo.<span class="title function_">bind</span>(&#123;<span class="attr">name</span>: <span class="string">&#x27;obj1&#x27;</span>&#125;)</span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;obj&#x27;</span>,</span><br><span class="line">    <span class="attr">baz</span>: bar</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj.<span class="title function_">baz</span>(); <span class="comment">// &#123; name: &#x27;obj1&#x27; &#125;</span></span><br></pre></td></tr></table></figure></div>

<p>3.显示绑定</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// new[低] -- 显式(不能使用apply/call)[高]</span></span><br><span class="line"><span class="keyword">const</span> bindFn = foo.<span class="title function_">bind</span>(&#123;<span class="attr">name</span>: <span class="string">&#x27;obj&#x27;</span>&#125;);</span><br><span class="line"><span class="keyword">new</span> <span class="title function_">bindFn</span>(); <span class="comment">// foo &#123;&#125;</span></span><br></pre></td></tr></table></figure></div>

<p>4.new绑定 (不能和apply和call一起使用 bind使用时高于显示绑定优先级)</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// new(高) -- 隐式(低)</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;obj&#x27;</span>,</span><br><span class="line">    <span class="attr">foo</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> obj.<span class="title function_">foo</span>(); <span class="comment">// foo &#123;&#125;</span></span><br></pre></td></tr></table></figure></div>

<p><strong>注意</strong></p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bind/apply比较</span></span><br><span class="line"><span class="keyword">const</span> bar = foo.<span class="title function_">bind</span>(&#123;<span class="attr">name</span>: <span class="string">&#x27;bind&#x27;</span>&#125;);</span><br><span class="line">bar.<span class="title function_">apply</span>(&#123;<span class="attr">name</span>: <span class="string">&#x27;apply&#x27;</span>&#125;); <span class="comment">// &#123; name: &#x27;bind&#x27; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// bind/call比较</span></span><br><span class="line">bar.<span class="title function_">call</span>(&#123;<span class="attr">name</span>: <span class="string">&#x27;call&#x27;</span>&#125;); <span class="comment">// &#123; name: &#x27;bind&#x27; &#125;</span></span><br></pre></td></tr></table></figure></div>

<p>结论：bind比apply&#x2F;call优先级更高</p>
<h2 id="4-四大规则之外的规则"><a href="#4-四大规则之外的规则" class="headerlink" title="4.四大规则之外的规则"></a>4.四大规则之外的规则</h2><h3 id="1-显示绑定中-如果绑定null-x2F-undefined-则使用默认绑定规则"><a href="#1-显示绑定中-如果绑定null-x2F-undefined-则使用默认绑定规则" class="headerlink" title="1.显示绑定中 如果绑定null&#x2F;undefined 则使用默认绑定规则"></a>1.显示绑定中 如果绑定null&#x2F;undefined 则使用默认绑定规则</h3><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">foo.<span class="title function_">apply</span>(<span class="literal">null</span>); <span class="comment">// node-&gt;global 浏览器-&gt;window</span></span><br><span class="line">foo.<span class="title function_">apply</span>(<span class="literal">undefined</span>); <span class="comment">// node-&gt;global 浏览器-&gt;window</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&#x27;use strict&#x27;</span></span><br><span class="line">foo.<span class="title function_">apply</span>(<span class="literal">null</span>); <span class="comment">// null</span></span><br><span class="line">foo.<span class="title function_">apply</span>(<span class="literal">undefined</span>); <span class="comment">// undefiend</span></span><br></pre></td></tr></table></figure></div>

<h3 id="2-间接函数引用-使用默认绑定规则"><a href="#2-间接函数引用-使用默认绑定规则" class="headerlink" title="2.间接函数引用 使用默认绑定规则"></a>2.间接函数引用 使用默认绑定规则</h3><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj1 = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;obj1&#x27;</span>,</span><br><span class="line">    foo,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> obj2 = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;obj2&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">obj2.<span class="property">foo</span> = obj1.<span class="property">foo</span>;</span><br><span class="line">obj2.<span class="title function_">foo</span>(); <span class="comment">// &#123; name: &#x27;obj2&#x27;, foo: [Function: foo] &#125;</span></span><br><span class="line">(obj2.<span class="property">foo</span> = obj1.<span class="property">foo</span>)(); <span class="comment">// node-&gt;global 浏览器-&gt;window</span></span><br></pre></td></tr></table></figure></div>

<h3 id="3-箭头函数的this"><a href="#3-箭头函数的this" class="headerlink" title="3.箭头函数的this"></a>3.箭头函数的this</h3><p>箭头函数中的this(箭头函数中没有this 能打印出来的this是根据变量的查找规则查找到的this)</p>
<p><strong>规则</strong>：变量的查找规则</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">foo</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span> === <span class="variable language_">window</span>, <span class="string">&#x27;this绑定&#x27;</span>); <span class="comment">// true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj1 = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;obj1&#x27;</span>,</span><br><span class="line">    foo,</span><br><span class="line">&#125;</span><br><span class="line">obj1.<span class="title function_">foo</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj2 = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;obj2&#x27;</span>,</span><br><span class="line">    <span class="attr">foo</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj2.<span class="title function_">foo</span>()(); <span class="comment">// &#123;name: &#x27;obj2&#x27;, foo: ƒ&#125;	</span></span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js基础知识</tag>
      </tags>
  </entry>
  <entry>
    <title>探究浏览器的渲染原理(学习笔记)</title>
    <url>/2023/02/14/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86(%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0)/</url>
    <content><![CDATA[<h2 id="1-网页的解析过程"><a href="#1-网页的解析过程" class="headerlink" title="1.网页的解析过程"></a>1.网页的解析过程</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/273416f64e8c4e4bb3c8c282271d39e8~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp"
                      alt="浏览器解析文件过程"
                ></p>
<h2 id="2-浏览器的渲染流程"><a href="#2-浏览器的渲染流程" class="headerlink" title="2.浏览器的渲染流程"></a>2.浏览器的渲染流程</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://web-dev.imgix.net/image/T4FyVKpzu4WKF1kBNvXepbi08t52/S9TJhnMX1cu1vrYuQRqM.png?auto=format"
                      alt="WebKit main flow."
                ></p>
<h3 id="渲染流程"><a href="#渲染流程" class="headerlink" title="渲染流程"></a>渲染流程</h3><p>1.从服务器获取到文件index.html 生成DOM Tree</p>
<p>2.遇到link标签后 下载CSS文件 生成CSSOM Tree（CSS对象模型）</p>
<p>3.根据DOM Tree和CSSOM Tree生成Render Tree</p>
<p>4.在渲染树上运行布局(Layout)以计算每个节点的几何体（布局是确定呈现树中元素的高度，大小，位置信息等等）</p>
<p>5.将每个节点都绘制到屏幕上</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e16c3f17dd084d9aab281278ac868242~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp"
                      alt="Render Tree"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/350628adaebb44a6ab3a59cc60cdec35~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp"
                      alt="布局和绘制的步骤"
                ></p>
<p><strong>注意：</strong></p>
<p>1.link标签不会阻碍DOM Tree的构建过程 但是有可能会阻碍Render Tree的构建过程</p>
<p>2.DOM Tree和Render Tre不是一一对应的关系 （display:none）</p>
<h2 id="3-回流和重绘解析"><a href="#3-回流和重绘解析" class="headerlink" title="3.回流和重绘解析"></a>3.回流和重绘解析</h2><h3 id="1-回流（reflow-重排）"><a href="#1-回流（reflow-重排）" class="headerlink" title="1.回流（reflow 重排）"></a>1.回流（reflow 重排）</h3><p>对节点的大小、位置修改重新计算称之为回流</p>
<h4 id="如何能引成回流"><a href="#如何能引成回流" class="headerlink" title="如何能引成回流"></a>如何能引成回流</h4><p>1.DOM结构发生改变（添加&#x2F;移除节点）</p>
<p>2.改变了布局（修改width、height、font-size）</p>
<p>3.窗口resize（修改窗口的大小）</p>
<p>4.调用getComputeStyle方法获取尺寸、位置信息</p>
<p>🌰</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;display&quot;</span>&gt;显示的内容&lt;/div&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>点击隐藏<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;display&#x27;</span>).<span class="title function_">remove</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></div>

<h3 id="2-重绘（paint）"><a href="#2-重绘（paint）" class="headerlink" title="2.重绘（paint）"></a>2.重绘（paint）</h3><p>重新渲染页面称为重绘</p>
<h4 id="如何能引成重绘"><a href="#如何能引成重绘" class="headerlink" title="如何能引成重绘"></a>如何能引成重绘</h4><p>1.修改背景色、文字颜色、边框颜色、样式等</p>
<p><strong>注意</strong></p>
<p><strong>回流一定会引起重绘 回流是一件很消耗性能的事情</strong></p>
<h4 id="如何避免回流"><a href="#如何避免回流" class="headerlink" title="如何避免回流"></a>如何避免回流</h4><p>1.修改样式尽量一次性修改</p>
<p>2.避免频繁操作DOM</p>
<p>3.避免通过getComputeStyle获取尺寸、位置信息</p>
<p>4.对某些元素使用position:absolute&#x2F;fixed(开销相对较少 不会对其他元素造成影响)</p>
<h2 id="4-合成和性能优化-以内存管理作为代价"><a href="#4-合成和性能优化-以内存管理作为代价" class="headerlink" title="4.合成和性能优化(以内存管理作为代价)"></a>4.合成和性能优化(以内存管理作为代价)</h2><h3 id="1-composite合成"><a href="#1-composite合成" class="headerlink" title="1.composite合成"></a>1.composite合成</h3><ul>
<li>绘制的过程中 可以将布局后元素绘制到多个合成图层中</li>
<li>默认情况下 <strong>标准流</strong>的内容都是被绘制在同一个图层（layer）中的</li>
<li>一些特殊的属性 会创建一个新的合成层 并且新的图层可以<strong>利用GPU来加速绘制</strong>（每个合成层都是单独渲染的）</li>
</ul>
<h4 id="哪些属性可以形成新的合成层？"><a href="#哪些属性可以形成新的合成层？" class="headerlink" title="哪些属性可以形成新的合成层？"></a>哪些属性可以形成新的合成层？</h4><p>1.3D transforms</p>
<p>2.video、canvas、iframe</p>
<p>3.opacity 动画转换时</p>
<p>4.position:fixed</p>
<p>5.will-change:(一个实验性的属性 提前告诉浏览器元素可能发生哪些变化)</p>
<p>6.animation或transition设置了opacity、transform</p>
<h2 id="5-defer和async属性"><a href="#5-defer和async属性" class="headerlink" title="5.defer和async属性"></a>5.defer和async属性</h2><p>前置知识</p>
<p>当页面上遇到script标签时 不能继续构建DOM树 —&gt; 下载JS文件并执行JS脚本  —&gt; JS脚本执行完毕 继续解析html文件 构建DOM树</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2c87ef4045e242c283b948c2c065e864~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp"
                      alt="当遇到js元素时执行过程"
                ></p>
<h3 id="造成这种情况的原因"><a href="#造成这种情况的原因" class="headerlink" title="造成这种情况的原因"></a>造成这种情况的原因</h3><p>1.JS的作用之一就是<strong>操作DOM元素</strong> 并修改DOM</p>
<p>2.等DOM构建完成并且渲染后再下载JS文件 会造成严重的回流和重绘 造成性能损失（影响页面的性能）</p>
<p>3.遇到JS文件优先下载JS代码 再构建DOM树</p>
<h3 id="新的问题"><a href="#新的问题" class="headerlink" title="新的问题"></a>新的问题</h3><p>1.脚本比html重 处理时间更长</p>
<p>2.首屏加载缓慢 页面解析堵塞</p>
<h3 id="解决问题的方法"><a href="#解决问题的方法" class="headerlink" title="解决问题的方法"></a>解决问题的方法</h3><h4 id="1-defer"><a href="#1-defer" class="headerlink" title="1.defer"></a>1.defer</h4><p>defer 属性告诉浏览器<strong>不要等待脚本下载</strong> 而<strong>继续解析HTML 构建DOM Tree</strong></p>
<p>脚本会由浏览器来进行下载 但是<strong>不会阻塞DOM Tree的构建过程</strong></p>
<p>如果脚本提前下载好了 它会<strong>等待DOM Tree构建完成 在DOMContentLoaded事件之前先执行defer中的代码</strong></p>
<p>🌰</p>
<p>HTML</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>app<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;title&quot;</span>&gt;</span>title<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">defer</span> <span class="attr">src</span>=<span class="string">&quot;defer.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">defer</span> <span class="attr">src</span>=<span class="string">&quot;defer1.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 后执行 因为defer会在DOMContentLoaded之前被执行</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>JS</p>
<p>defer.js</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;defer log&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> title = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;title&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(title)</span><br></pre></td></tr></table></figure></div>

<p>defer1.js</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;defer1 log&#x27;</span>);</span><br></pre></td></tr></table></figure></div>

<p>执行结果</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// defer log</span></span><br><span class="line"><span class="comment">// &lt;div id=&quot;title&quot;&gt;title&lt;/div&gt;</span></span><br><span class="line"><span class="comment">// console.log(&#x27;defer1 log&#x27;);</span></span><br><span class="line"><span class="comment">// DOMContentLoaded</span></span><br></pre></td></tr></table></figure></div>

<p><strong>注意：</strong></p>
<p>1.defer仅适用于外部脚本 对于script默认内容会被忽略</p>
<p>2.defer可以提高页面的性能 并且推荐放到head元素中</p>
<p>3.多个带defer的脚本是可以保持正确的顺序执行的</p>
<h4 id="2-async"><a href="#2-async" class="headerlink" title="2.async"></a>2.async</h4><p>async是让一个脚本完全独立的</p>
<p>1.浏览器不会因 async 脚本而阻塞（与 defer 类似）</p>
<p>2.async脚本不能保证顺序 它是<strong>独立下载 独立运行  不会等待其他脚本</strong></p>
<p>3.async不会能保证在DOMContentLoaded之前或者之后执行</p>
<p>🌰</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">&quot;async.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>共同点</p>
<p>都是异步加载JS文件</p>
<p>不同点</p>
<p>1.defer：按照顺序加载文件</p>
<p>2.async：先下载完哪个文件加载哪个文件(完全独立)</p>
]]></content>
      <tags>
        <tag>浏览器原理</tag>
      </tags>
  </entry>
</search>
